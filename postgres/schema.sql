  
  --create an extension/plugin to create random uuids;
  CREATE EXTENSION IF NOT EXISTS "pgcrypto";


  --create an extension/plugin to use embeddings;
  CREATE EXTENSION IF NOT EXISTS "vector";

  /* 
    Schema(Users):
    id =  UUID (Primary Key), by default generated by postgres,
    firstName = String(50) NOT NULL,
    lastName = String(50) NOT NULL,
    email = STRING(50) UNIQUE AND NOT NULL,
    password = String(200) NOT NULL, (since it returns a hash)
    pct = TimeStamp, by default generated by postgres. Timestamp to indicate when
    the password was chaged. Helps in logging out users when they change passwords.
    createdAt = TimeStamp, by default generated by postgres.
  */
  CREATE TABLE IF NOT EXISTS USERS (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    firstName VARCHAR(50) NOT NULL,
    lastName VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(200) NOT NULL,
    pct TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

  /* 
    Schema(Uploads):
    id =  UUID (Primary Key), by default generated by postgres,
    user_id = UUID (Foreign Key), references `user`.
    file_name = TEXT  NOT NULL,
    original_name = TEXT NOT NULL,
    status = String(50) NOT NULL [Processing - After uploading it to s3, active - once the embeddings are calculated.],
    createdAt = TimeStamp, by default generated by postgres.
    Needs updatedAt.

    future:
    type VARCHAR(10) NOT NULL CHECK(type IN ('pdf', 'text')),
  */
    CREATE TABLE IF NOT EXISTS UPLOADS(
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES USERS(ID) ON DELETE CASCADE NOT NULL,
    file_name TEXT NOT NULL,
    original_name TEXT NOT NULL,
    status VARCHAR(20) NOT NULL CHECK(status IN('processing', 'active', 'failed')),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

  /* 
    Schema(Chats):
    id =  UUID (Primary Key), by default generated by postgres,
    upload_id = UUID (Foreign Key), references `uploads`.
    createdAt = TimeStamp, by default generated by postgres.
  */
  /* Future Use */
  -- CREATE TABLE IF NOT EXISTS CHATS(
  --   id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  --   upload_id UUID REFERENCES UPLOADS(ID) ON DELETE CASCADE NOT NULL,
  --   created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  --   );

  /* 
    Schema(Conversations):
    id =  UUID (Primary Key), by default generated by postgres,
    upload_id = UUID (Foreign Key), references `Uploads`.
    message = Text, can be of any length,
    type = `ai` or `human`. Messages can be generated by either types.
    createdAt = TimeStamp, by default generated by postgres.

    chat_id = UUID (Foreign Key), references `chats`. <Not used>
  */
  CREATE TABLE IF NOT EXISTS CONVERSATIONS (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    upload_id UUID REFERENCES UPLOADS(ID) ON DELETE CASCADE NOT NULL,
    message TEXT NOT NULL,
    type VARCHAR(10) NOT NULL CHECK(type IN ('ai', 'human')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );


    /*
     Schema(Embeddings):
     id =  UUID (Primary Key), by default generated by postgres,
     upload_id = UUID (Foreign Key), references `uploads`.
     page_number = Number, Page number from which chunk is extracted.
     content = TEXT. To return the text of the selected embeddings.
     embeddings = VECTOR. Numeric representation of the embedding in
     the vector format.
    */
    CREATE TABLE IF NOT EXISTS DOCUMENTS(
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        upload_id UUID REFERENCES UPLOADS(ID) ON DELETE CASCADE NOT NULL,
        page_number INTEGER NOT NULL,
        content TEXT NOT NULL,
        embeddings VECTOR(1536) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );


    /*
      Creating an index on upload id, so that searching on documents
      becomes faster.
    */
    CREATE INDEX IF NOT EXISTS documents_upload_id_idx ON DOCUMENTS(upload_id);
    