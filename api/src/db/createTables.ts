import { pg } from './pg';

/**
 * This method creates postgres tables.
 */
export const createTables = async () => {
  // create an extension/plugin to create random uuids;
  await pg.query(`CREATE EXTENSION IF NOT EXISTS "pgcrypto";`);

  // This creates user table if not exists.
  /* 
    Schema(Users):
    id =  UUID (Primary Key), by default generated by postgres,
    email = STRING(30) UNIQUE AND NOT NULL,
    password = String(30) NOT NULL,
    createdAt = TimeStamp, by default generated by postgres.
  */
  await pg.query(`CREATE TABLE IF NOT EXISTS USERS (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(30) UNIQUE NOT NULL,
    password VARCHAR(30) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );`);

  // This creates uploads table if not exists.
  /* 
    Schema(Uploads):
    id =  UUID (Primary Key), by default generated by postgres,
    user_id = UUID (Foreign Key), references `user`.
    file_name = STRING(30)  NOT NULL,
    file_url = String(50) UNIQUE, NOT NULL,
    type = `pdf` or `text` files are supported.
    createdAt = TimeStamp, by default generated by postgres.
  */
  await pg.query(`CREATE TABLE IF NOT EXISTS UPLOADS(
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES USERS(ID) ON DELETE CASCADE NOT NULL,
    file_name VARCHAR(30) NOT NULL,
    file_url VARCHAR(50) NOT NULL UNIQUE,
    type VARCHAR(10) NOT NULL CHECK(type IN ('pdf', 'text')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );`);

  // This creates chats table if not exists.
  /* 
    Schema(Chats):
    id =  UUID (Primary Key), by default generated by postgres,
    upload_id = UUID (Foreign Key), references `uploads`.
    createdAt = TimeStamp, by default generated by postgres.
  */
  await pg.query(`CREATE TABLE IF NOT EXISTS CHATS(
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    upload_id UUID REFERENCES UPLOADS(ID) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );`);

  // This creates conversations table if not exists.
  /* 
    Schema(Conversations):
    id =  UUID (Primary Key), by default generated by postgres,
    chat_id = UUID (Foreign Key), references `chats`.
    message = Text, can be of any length,
    type = `ai` or `human`. Messages can be generated by either types.
    createdAt = TimeStamp, by default generated by postgres.
  */
  await pg.query(`CREATE TABLE IF NOT EXISTS CONVERSATIONS (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    chat_id UUID REFERENCES CHATS(ID) ON DELETE CASCADE NOT NULL,
    message TEXT NOT NULL,
    type VARCHAR(10) NOT NULL CHECK(type IN ('ai', 'human')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );`);
};
